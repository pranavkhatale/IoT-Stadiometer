#include "arduino_secrets.h"
/*
  :Author:   Pranav Khatale
  :Date:     01/05/2022
  :Revision: Version 1.0
  :License:  Public Domain

  = Project: IoT Based Stadiometer
    Developed at : Department of Electronics & Telecommunication Engineering, Government College of Engineering. Chandrapur (India)

  For complete documentation of this project visit: https://github.com/pranavkhatale/IoT-Stadiometer
  Sketch generated by the Arduino IoT Cloud Thing "IoT Stadiometer"
  https://create.arduino.cc/cloud/things/9245b08b-ff7d-4a33-ad2f-b215554b0e51

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  CloudLength height;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

int t = 0;
int tc = 0;
float rawheight;
float heightraw;

// Including library thingsProperties.h
#include "thingProperties.h"

//Sensor & I2C LCD
// NodeMCU ESP8266 with HC-SR04
const int trigPin = 12; //D6
const int echoPin = 14; //D5
//define sound velocity in cm/uS
#define SOUND_VELOCITY 0.034

long duration;
float distanceCm;
float distanceInch;

// NodeMCU with I2C LCD
// D1 >> SCL
// D2 >> SDA
#include <LiquidCrystal_I2C.h>
// set the LCD number of columns and rows
int lcdColumns = 16;
int lcdRows = 2;
// set LCD address, number of columns and rows
// if you don't know your display address, run an I2C scanner sketch
LiquidCrystal_I2C lcd(0x27, lcdColumns, lcdRows);


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(115200);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500);

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
  */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  //----------------
  // initialize LCD
  lcd.init();
  // turn on LCD backlight
  lcd.backlight();

  pinMode(trigPin, OUTPUT); // Sets the trigPin as an Output
  pinMode(echoPin, INPUT); // Sets the echoPin as an Input
  pinMode(D3, OUTPUT); //Buzzer
  pinMode(D4, OUTPUT); //Onboard Blue LED
  pinMode(D8, OUTPUT); //Red LED

  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("      IoT");
  lcd.setCursor(0, 1);
  lcd.print("  Stadiometer");
  Serial.println("IoT Stadiometer");
  delay(2000);
  lcd.clear();

  lcd.setCursor(0, 0);
  lcd.print(" Connecting to");
  lcd.setCursor(0, 1);
  lcd.print("WiFi & IoT Cloud");
  delay(2000);
  lcd.clear();
}

void loop()
{
  ArduinoCloud.update();

  if (ArduinoCloud.connected() == 0)
  {
    ArduinoCloud.update();
    Serial.println("Waiting for connection to Arduino IoT Cloud");

    lcd.setCursor(0, 0);
    lcd.print("...");
    lcd.setCursor(0, 1);
    lcd.print("             ...");
    delay(1000);
    lcd.clear();
    tc = tc + 1;

    for (; tc >= 15;)
    {
      lcd.setCursor(0, 0);
      lcd.print("   Networking");
      lcd.setCursor(0, 1);
      lcd.print("     Issues");
      digitalWrite(D3, HIGH);   // turn on buzzer
      delay(5000);
      lcd.clear();
      digitalWrite(D3, LOW);   // turn on buzzer
      tc = 0;
      break;
    }
  }

  else
  {
    if (t == 0)
    {
      t = t + 1;
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("  Connection");
      lcd.setCursor(0, 1);
      lcd.print("  Established");
      digitalWrite(D8, HIGH);

      digitalWrite(D3, HIGH);   // turn on buzzer
      digitalWrite(D4, HIGH);   // turn on onboard Blue LED
      digitalWrite(D8, HIGH);   // turn on Red LED
      delay(500);
      digitalWrite(D3, LOW);    // turn off buzzer
      digitalWrite(D4, LOW);    // turn off onboard Blue LED
      digitalWrite(D8, LOW);   // turn off Red LED
      delay(500);
      digitalWrite(D3, HIGH);   // turn on buzzer
      digitalWrite(D4, HIGH);   // turn on onboard Blue LED
      digitalWrite(D8, HIGH);   // turn on Red LED
      delay(500);
      digitalWrite(D3, LOW);    // turn off buzzer
      digitalWrite(D4, LOW);    // turn off onboard Blue LED
      digitalWrite(D8, LOW);    // turn off Red LED
      delay(500);

      lcd.clear();
    }

    lcd.setCursor(0, 0);
    lcd.print("    Reading");
    lcd.setCursor(0, 1);
    lcd.print("    Height");
    delay(500);
    lcd.clear();

    // Clears the trigPin
    digitalWrite(trigPin, LOW);
    delayMicroseconds(2);
    // Sets the trigPin on HIGH state for 10 micro seconds
    digitalWrite(trigPin, HIGH);
    delayMicroseconds(10);
    digitalWrite(trigPin, LOW);

    // Reads the echoPin, returns the sound wave travel time in microseconds
    duration = pulseIn(echoPin, HIGH);

    // Calculate the distance
    distanceCm = duration * SOUND_VELOCITY / 2;

    // Prints the distance on the Serial Monitor
    Serial.print("Distance (cm): ");
    Serial.println(distanceCm);

    rawheight = 200 - distanceCm;
    //Serial.print("rawheight (cm): ");
    //Serial.println(rawheight);

    if (rawheight >= 100)
    {
      delay(5000);
      // Clears the trigPin
      digitalWrite(trigPin, LOW);
      delayMicroseconds(2);
      // Sets the trigPin on HIGH state for 10 micro seconds
      digitalWrite(trigPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(trigPin, LOW);

      // Reads the echoPin, returns the sound wave travel time in microseconds
      duration = pulseIn(echoPin, HIGH);

      // Calculate the distance
      distanceCm = duration * SOUND_VELOCITY / 2;

      // Prints the distance on the Serial Monitor
      Serial.print("Distance (cm): ");
      Serial.println(distanceCm);

      heightraw = 200 - distanceCm;

      if (heightraw >= 100)
      {
        height = heightraw;

        //Serial.print("rawheight (cm): ");
        //Serial.println(rawheight);

        // Prints the distance on the Serial Monitor
        Serial.print("Height (cm): ");
        Serial.println(height);
        Serial.println("Data Uploaded Sucessfully.");
        Serial.println("                                ");

        lcd.clear();

        // set cursor to first column, first row
        lcd.setCursor(0, 0);
        // print message
        lcd.print("Height:");
        lcd.print(height);
        lcd.print(" cm");
        lcd.setCursor(0, 1);
        lcd.print(" Data Uploaded");
        digitalWrite(D3, HIGH);   // turn on buzzer
        digitalWrite(D8, HIGH);   // turn on Red LED
        ArduinoCloud.update();
        delay(5000);
        // clears the display to print new message
        lcd.clear();
        digitalWrite(D3, LOW);   // turn off buzzer
        digitalWrite(D8, LOW);   // turn off Red LED
      }
    }
  }
}
